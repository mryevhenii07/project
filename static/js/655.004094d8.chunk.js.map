{"version":3,"file":"static/js/655.004094d8.chunk.js","mappings":"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","sources":["api/Api.js","webpack://project/./src/pages/form/Form.module.scss?0f33","pages/form/Form.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = \"https://frontend-test-assignment-api.abz.agency/api/v1/\";\n\nexport function fetchUser(count) {\n  return axios\n    .get(`${BASE_URL}users?page=1&count=${count}`)\n    .then((response) => response.data);\n}\n\nexport function fetchToken() {\n  return axios.get(`${BASE_URL}token`).then((response) => response.data.token);\n}\n\nexport function createUser(token, user) {\n  return axios\n    .post(`${BASE_URL}users`, user, { headers: { Token: token } })\n    .then((response) => response.data);\n}\nexport function fetchPosition() {\n  return axios\n    .get(`${BASE_URL}positions`)\n    .then((response) => response.data.positions);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapForm\":\"Form_wrapForm__xvB93\",\"formMainTitle\":\"Form_formMainTitle__H-Aty\",\"form\":\"Form_form__KiIxm\",\"formLabel\":\"Form_formLabel__XEW-5\",\"formInputYourName\":\"Form_formInputYourName__b0My1\",\"formInputEmail\":\"Form_formInputEmail__+rwDp\",\"formInputPhone\":\"Form_formInputPhone__SKsOK\",\"wrapError\":\"Form_wrapError__WdplE\",\"error\":\"Form_error__mYrgJ\",\"noError\":\"Form_noError__Opa+8\",\"selectPosition\":\"Form_selectPosition__wXd-H\",\"formRadio\":\"Form_formRadio__nWqMf\",\"wrapBtnPhoto\":\"Form_wrapBtnPhoto__zl1u-\",\"upload\":\"Form_upload__z4MRm\",\"uploadPhoto\":\"Form_uploadPhoto__MReGM\",\"wrapFormSubmit\":\"Form_wrapFormSubmit__PkWk+\",\"formSubmit\":\"Form_formSubmit__gJbXX\",\"actFormSubmit\":\"Form_actFormSubmit__8TBMe\"};","import { useState, useEffect } from \"react\";\nimport InputMask from \"react-input-mask\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\n// import { withStyles } from '@material-ui/core';\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\n\nimport { createUser, fetchPosition, fetchToken } from \"../../api/Api\";\n\nimport s from \"./Form.module.scss\";\n\n// const CssTextField = withStyles({\n//   root: {\n//     '& label.Mui-focused': {\n//       color: 'gray',\n//     },\n//     '& .MuiInput-underline:after': {\n//       borderBottomColor: 'gray',\n//     },\n//     '& .MuiOutlinedInput-root': {\n//       '& fieldset': {\n//         borderColor: 'gray',\n//       },\n//       '&:hover fieldset': {\n//         borderColor: 'gray',\n//       },\n//       '&.Mui-focused fieldset': {\n//         borderColor: 'gray',\n//       },\n//     },\n//   },\n// })(TextField);\n\nconst Form = () => {\n  const [value, setValue] = useState(\"\");\n  const [token, setToken] = useState(\"\");\n  // const [img, setImg] = useState('');\n\n  const onChangePhoto = () => {\n    console.log(\"jj\");\n  };\n  const { push } = useHistory();\n  // console.log(history);\n\n  const [positions, setPositions] = useState([]);\n  useEffect(() => {\n    fetchPosition().then(setPositions);\n    fetchToken().then(setToken);\n  }, []);\n\n  const {\n    control, //mask\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors, isValid },\n  } = useForm({ mode: \"onChange\" });\n\n  const handleChange = (e) => {\n    setValue(parseInt(e.target.value));\n    // console.log(e.target.value);\n  };\n  // console.log('1', token);\n\n  const onSubmit = ({ email, name, position_id, photo, phone }) => {\n    const formData = new FormData();\n    formData.set(\"email\", email);\n    formData.set(\"name\", name);\n    formData.set(\"phone\", phone);\n    formData.set(\"position_id\", position_id);\n    formData.set(\"photo\", photo[0]);\n\n    createUser(token, formData);\n    push(\"/success\");\n    reset();\n  };\n\n  return (\n    <div className={s.wrapForm}>\n      <h1 className={s.formMainTitle}>Working with POST request</h1>\n      <form onSubmit={handleSubmit(onSubmit)} className={s.form}>\n        <label htmlFor=\"\" className={s.formLabel}>\n          <TextField\n            className={s.formInputYourName}\n            {...register(\"name\", {\n              required: \"Required field\",\n              minLength: { value: 2, message: \"Minimum 2 characters\" },\n              maxLength: { value: 60, message: \"Maximum 60 characters\" },\n            })}\n            error={!!errors.name?.message}\n            id=\"outlined-text-input\"\n            label=\"Your name\"\n            autoComplete=\"current-text\"\n            variant=\"outlined\"\n          />\n          <div className={s.wrapError}>\n            {errors?.name && (\n              <p className={s.error}>{errors?.name?.message || \"Error!\"}</p>\n            )}\n          </div>\n        </label>\n\n        <label htmlFor=\"\" className={s.formLabel}>\n          <TextField\n            className={s.formInputEmail}\n            type=\"email\"\n            {...register(\"email\", {\n              required: \"Required field\",\n              pattern: {\n                value:\n                  // eslint-disable-next-line no-control-regex\n                  /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i,\n                message: \"Invalid email address\",\n              },\n            })}\n            error={!!errors.email?.message}\n            id=\"outlined-email-input\"\n            label=\"Email\"\n            autoComplete=\"current-email\"\n            variant=\"outlined\"\n          />\n          <div className={s.wrapError}>\n            {errors?.email && (\n              <p className={s.error}>{errors?.email?.message || \"errors\"}</p>\n            )}\n          </div>\n        </label>\n        <label htmlFor=\"\" className={s.formLabel}>\n          {/* <Controller\n            name=\"phone\"\n            control={control}\n            // as={<MaskedInput mask=\"(999)-999-9999\" />}\n            rules={{\n              ...register('phone', {\n                required: 'Required field',\n                pattern: {\n                  value: /^[+]{0,1}380[0-9]{9}$/i,\n                  message: '+38 (XXX) XXX-XX-XX',\n                },\n              }),\n            }}\n            render={({ field: { onChange, value } }) => (\n              <InputMask mask=\"+38 (099) 999 99 99\" value={value} onChange={onChange}>\n                {(inputProps) => (\n                  <TextField\n                    $error={false}\n                    // error={!!errors.phone?.message}\n                    label=\"Phone\"\n                    variant=\"outlined\"\n                    type=\"text\"\n                    fullWidth\n                    required\n                    {...inputProps}\n                  />\n                )}\n              </InputMask>\n            )}\n          /> */}\n\n          <TextField\n            className={s.formInputPhone}\n            error={!!errors.phone?.message}\n            type=\"number\"\n            {...register(\"phone\", {\n              required: \"Required field\",\n              pattern: {\n                value: /^[+]{0,1}380[0-9]{9}$/i,\n                message: \"+38 (XXX) XXX-XX-XX\",\n              },\n            })}\n            id=\"outlined-phone-input\"\n            label=\"Phone\"\n            autoComplete=\"current-phone\"\n            variant=\"outlined\"\n          />\n\n          <div className={s.wrapError}>\n            {errors?.phone ? (\n              <p className={s.error}>{errors?.phone?.message || \"Error!\"}</p>\n            ) : (\n              <p className={s.noError}>+38 (XXX) XXX-XX-XX</p>\n            )}\n          </div>\n        </label>\n\n        <p className={s.selectPosition}>Select your position</p>\n\n        <RadioGroup\n          aria-label=\"gender\"\n          name=\"gender1\"\n          value={value}\n          onChange={handleChange}\n        >\n          {positions.map(({ id, name }) => {\n            return (\n              <FormControlLabel\n                {...register(\"position_id\", { required: \"Required field\" })}\n                key={id}\n                className={s.formRadio}\n                value={id}\n                control={<Radio color=\"secondary\" />}\n                label={name}\n              />\n            );\n          })}\n        </RadioGroup>\n\n        <div className={s.wrapBtnPhoto}>\n          <Button variant=\"contained\" component=\"label\" className={s.upload}>\n            Upload\n            <input\n              errors={errors}\n              type=\"file\"\n              {...register(\"photo\", {\n                required: \"Required field\",\n                validate: {\n                  lessThan5MB: (files) => files[0]?.size < 5000000 || \"Max 5MB\",\n                  acceptedFormats: (files) =>\n                    [\"image/jpeg\", \"image/jpg\"].includes(files[0]?.type) ||\n                    \"Invalid img\",\n                },\n              })}\n              hidden\n            />\n          </Button>\n          <div className={s.uploadPhoto}>Upload your photo</div>\n        </div>\n\n        <div\n          style={{\n            fontSize: \"12px\",\n            height: \"15px\",\n            color: \"red\",\n            paddingLeft: \"10px\",\n          }}\n        >\n          {errors?.photo && (\n            <p className={s.error}>{errors?.photo?.message || \"errors\"}</p>\n          )}\n        </div>\n\n        <div className={s.wrapFormSubmit}>\n          <button\n            type=\"submit\"\n            className={isValid ? `${s.actFormSubmit}` : `${s.formSubmit}`}\n            disabled={!isValid}\n          >\n            Sing up\n          </button>\n        </div>\n      </form>\n\n      <div></div>\n    </div>\n  );\n};\n\nexport default Form;\n"],"names":["BASE_URL","fetchUser","count","axios","then","response","data","fetchToken","token","createUser","user","headers","Token","fetchPosition","positions","useState","value","setValue","setToken","push","useHistory","setPositions","useEffect","useForm","mode","register","control","handleSubmit","reset","formState","errors","isValid","className","s","onSubmit","email","name","position_id","photo","phone","formData","FormData","set","htmlFor","TextField","required","minLength","message","maxLength","error","id","label","autoComplete","variant","type","pattern","RadioGroup","onChange","e","parseInt","target","map","FormControlLabel","key","Radio","color","Button","component","validate","lessThan5MB","files","size","acceptedFormats","includes","hidden","style","fontSize","height","paddingLeft","disabled"],"sourceRoot":""}